import os
import json
import kivy
from kivy.app import App
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.utils import rgba
from kivy.uix.gridlayout import GridLayout
from kivy.core.window import Window
from kivy.graphics import Line
from kivy.clock import Clock
from kivy.graphics import Color, Ellipse
import xml.etree.ElementTree as ET
from datetime import datetime
import datetime as dt
kivy.require('1.11.1')



set_cols = 4
set_rows = 5
button_width = 100
button_height = 100

def sort_buttons_by_rank(filename):
    tree = ET.parse(filename)
    root = tree.getroot()

    # Define a function to calculate the ranking system
    def calculate_rank(row, col):
        return row * 100 + col

    # Calculate the rankings for all buttons
    buttons = root.findall('button')
    for button in buttons:
        row = int(button.find('row').text)
        col = int(button.find('col').text)
        rank = calculate_rank(row, col)
        button.set('rank', str(rank))

    # Sort the buttons based on their rankings
    buttons.sort(key=lambda x: int(x.get('rank')))

    # Rewrite the XML file with the sorted buttons
    tree.write(filename)


def cell_distance(coord1, coord2, columns):
    """Calculates the number of cells between two coordinates"""
    row1, col1 = coord1
    row2, col2 = coord2
    distance = abs(row2 - row1) * columns + abs(col2 - col1)
    return distance


class DraggableButton(Button):
    ...
    

class DateButton(DraggableButton):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.text = dt.date.today().strftime('%d\n%B')
        self.font_size ='20sp'
        self.halign = 'center'
        self.valign = 'middle'
        self.color = [1, 1, 1, 1]
        self.background_color = rgba(1, 1, 1, 0.5)  # set alpha to 0.5
        self.markup = True
        self.is_dragging = False

        self.id = 'date'

    def update_date(self):
        self.text = datetime.date.today().strftime('%Y-%m-%d')
        
    def on_touch_up(self, touch):
        super().on_touch_up(touch)
        self.update_date()
        
    def on_touch_down(self, touch):
        if self.collide_point(*touch.pos):
            self.is_dragging = True
            self.border = [4, 4, 4, 4]
            return True

    def on_touch_move(self, touch):
        if self.is_dragging:
            # move the button with the touch
            self.pos = touch.pos

    def on_touch_up(self, touch):
        if self.is_dragging:
            self.is_dragging = False
            self.border = [0, 0, 0, 0]
            # calculate the row and column of the grid location
            x, y = self.pos
            grid_size = self.parent.size[0] / set_cols, self.parent.size[1] / set_rows
            col = int(x // grid_size[0])
            row = int(y // grid_size[1])

            # clamp the row and column values to the valid range
            col = max(min(col, set_cols-1), 0)
            row = max(min(row, set_rows-1), 0)

            # update the button's row and column values
            self.row = (set_rows - row)
            self.col = col + 1

            # place the button in the center of the nearest valid grid location
            self.pos = (col * grid_size[0] + grid_size[0]/2 - self.width/2,
                        row * grid_size[1] + grid_size[1]/2 - self.height/2)

            # update the file with the locations of all the buttons and their order
            tree = ET.parse('/home/pi/Desktop/buttons.xml')
            root = tree.getroot()

            # find the existing element for this button
            button_elem = root.find(f"button[id='{self.id}']")
            if button_elem is not None:
                # remove the existing element
                root.remove(button_elem)

            # create a new element with the updated information
            button_elem = ET.Element('button')
            ET.SubElement(button_elem, 'image').text = self.background_normal
            ET.SubElement(button_elem, 'script').text = ''
            ET.SubElement(button_elem, 'row').text = str(self.row)
            ET.SubElement(button_elem, 'col').text = str(self.col)
            ET.SubElement(button_elem, 'id').text = str(self.id)

            root.append(button_elem)

            # write the updated XML to the file
            tree.write('/home/pi/Desktop/buttons.xml')

            # update the pos_hint property with the new position
            self.pos_hint = {'x': self.pos[0] / self.parent.width, 'y': self.pos[1] / self.parent.height}

            # apply padding to the button
            self.padding = [25, 25]

            # Parse the XML file
            tree = ET.parse('buttons.xml')
            root = tree.getroot()

            # Create a list of buttons sorted by row and column
            buttons = sorted(root.findall('button'), key=lambda b: (int(b.find('row').text), int(b.find('col').text)))
            
            # Remove existing buttons from the root element
            for button in root.findall('button'):
                root.remove(button)
            
            # Add the sorted buttons back to the root element in order
            for button in buttons:
                root.append(button)
            
            # Write the sorted XML to a file
            tree.write('/home/pi/Desktop/buttons.xml', encoding='utf-8')
            
            # Example usage of the function
            sort_buttons_by_rank('buttons.xml')




    
class TimeButton(DraggableButton):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.text = datetime.now().strftime('%H:%M')
        self.is_time_button = True
        self.is_dragging = False
        self.id = 'time'

        Clock.schedule_interval(self.update_time, 1)
    
    def update_time(self, dt):
        self.text = datetime.now().strftime('%H:%M')
    
    def on_touch_down(self, touch):
        if self.collide_point(*touch.pos):
            self.is_dragging = True
            self.border = [4, 4, 4, 4]
            return True

    def on_touch_move(self, touch):
        if self.is_dragging:
            self.pos = touch.pos

    def on_touch_up(self, touch):
        if self.is_dragging:
            self.is_dragging = False
            self.border = [0, 0, 0, 0]
            # calculate the row and column of the grid location
            x, y = self.pos
            grid_size = self.parent.size[0] / set_cols, self.parent.size[1] / set_rows
            col = int(x // grid_size[0])
            row = int(y // grid_size[1])

            # clamp the row and column values to the valid range
            col = max(min(col, set_cols-1), 0)
            row = max(min(row, set_rows-1), 0)

            # update the button's row and column values
            self.row = (set_rows - row)
            self.col = col + 1

            # place the button in the center of the nearest valid grid location
            self.pos = (col * grid_size[0] + grid_size[0]/2 - self.width/2,
                        row * grid_size[1] + grid_size[1]/2 - self.height/2)

            # update the file with the locations of all the buttons and their order
            tree = ET.parse('/home/pi/Desktop/buttons.xml')
            root = tree.getroot()

            # find the existing element for this button
            button_elem = root.find(f"button[id='{self.id}']")
            if button_elem is not None:
                # remove the existing element
                root.remove(button_elem)

            # create a new element with the updated information
            button_elem = ET.Element('button')
            ET.SubElement(button_elem, 'image').text = self.background_normal
            ET.SubElement(button_elem, 'script').text = ''
            ET.SubElement(button_elem, 'row').text = str(self.row)
            ET.SubElement(button_elem, 'col').text = str(self.col)
            ET.SubElement(button_elem, 'id').text = 'time'

            root.append(button_elem)

            # write the updated XML to the file
            tree.write('/home/pi/Desktop/buttons.xml')

            # update the pos_hint property with the new position
            self.pos_hint = {'x': self.pos[0] / self.parent.width, 'y': self.pos[1] / self.parent.height}

            # apply padding to the button
            self.padding = [25, 25]

            # Parse the XML file
            tree = ET.parse('buttons.xml')
            root = tree.getroot()

            # Create a list of buttons sorted by row and column
            buttons = sorted(root.findall('button'), key=lambda b: (int(b.find('row').text), int(b.find('col').text)))
            
            # Remove existing buttons from the root element
            for button in root.findall('button'):
                root.remove(button)
            
            # Add the sorted buttons back to the root element in order
            for button in buttons:
                root.append(button)
            
            # Write the sorted XML to a file
            tree.write('/home/pi/Desktop/buttons.xml', encoding='utf-8')
            sort_buttons_by_rank('buttons.xml')

class OneByFourButton(Button):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.is_dragging = False
        self.row = None
        self.col = None
        self.pos_hint = {'x': 0, 'y': 0}
        
    def update_button_width(self):
        grid_size = self.parent.size[0] / set_cols, self.parent.size[1] / set_rows
        cell_size = min(grid_size[0], grid_size[1])
        self.width = cell_size * 2 
        self.height = cell_size * 2
        print("Updating")

        # adjust the button's position based on its new size
        col = int(self.pos[0] // grid_size[0])
        row = int(self.pos[1] // grid_size[1])
        self.pos = (col * grid_size[0] + grid_size[0]/2 - self.width/2,
                    row * grid_size[1] + grid_size[1]/2 - self.height/2)


    def on_touch_down(self, touch):
        if self.collide_point(*touch.pos):
            self.is_dragging = True
            self.border = [4, 4, 4, 4]
            return True

    def on_touch_move(self, touch):
        if self.is_dragging:
            # move the button with the touch
            self.pos = touch.pos

    def on_touch_up(self, touch):
        if self.is_dragging:
            self.is_dragging = False
            self.border = [0, 0, 0, 0]
            # calculate the row and column of the grid location
            x, y = self.pos
            grid_size = self.parent.size[0] / set_cols, self.parent.size[1] / set_rows
            col = int(x // grid_size[0])
            row = int(y // grid_size[1])
            # clamp the row and column values to the valid range
            col = max(min(col, set_cols-1), 0)
            row = max(min(row, set_rows-1), 0)

            # update the button's row and column values
            self.row = (set_rows - row)
            self.col = col + 1

            # place the button in the center of the nearest valid grid location
            self.pos = (col * grid_size[0] + grid_size[0]/2 - self.width/2,
                        row * grid_size[1] + grid_size[1]/2 - self.height/2)

            # update the file with the locations of all the buttons and their order
            tree = ET.parse('/home/pi/Desktop/buttons.xml')
            root = tree.getroot()

            # find the existing element for this button
            button_elem = root.find(f"button[text='{self.text}']")
            if button_elem is not None:
                # remove the existing element
                root.remove(button_elem)

            # create a new element with the updated information
            button_elem = ET.Element('button')
            ET.SubElement(button_elem, 'text').text = self.text
            ET.SubElement(button_elem, 'image').text = self.background_normal
            ET.SubElement(button_elem, 'script').text = ''
            ET.SubElement(button_elem, 'row').text = str(self.row)
            ET.SubElement(button_elem, 'col').text = str(self.col)
            root.append(button_elem)

            # write the updated XML to the file
            tree.write('/home/pi/Desktop/buttons.xml')

            # update the pos_hint property with the new position
            self.pos_hint = {'x': self.pos[0] / self.parent.width, 'y': self.pos[1] / self.parent.height}

            # apply padding to the button
            self.padding = [25, 25]
            
            # Parse the XML file
            tree = ET.parse('buttons.xml')
            root = tree.getroot()
            
            # Create a list of buttons sorted by row and column
            buttons = sorted(root.findall('button'), key=lambda b: (int(b.find('row').text), int(b.find('col').text)))
            
            # Remove existing buttons from the root element
            for button in root.findall('button'):
                root.remove(button)
            
            # Add the sorted buttons back to the root element in order
            for button in buttons:
                root.append(button)
            
            # Write the sorted XML to a file
            tree.write('buttons.xml', encoding='utf-8')
            sort_buttons_by_rank('buttons.xml')

    def update_position(self):
        # update the button's row and column values when it is moved programmatically
        grid_size = self.parent.size[0] / set_cols, self.parent.size[1] / set_rows
        col = int(self.pos[0] // grid_size[0])
        row = int(self.pos[1] // grid_size[1])
    
        # clamp the row and column values to the valid range
        col = max(min(col, 3), 0)
        row = max(min(row, 2), 0)
    
        self.row = 3 - row
        self.col = col + 1
    
        # set the button's size based on the minimum of the grid cell width and height
        cell_size = min(grid_size[0], grid_size[1])
        self.width = cell_size - 50
        self.height = cell_size - 50
    
        # adjust the button's position based on its new size and grid cell
        self.pos = (col * grid_size[0] + grid_size[0]/2 - self.width/2,
                    row * grid_size[1] + grid_size[1]/2 - self.height/2)
    
        # adjust the button's position based on its new size and grid cell
        self.pos = (self.pos[0] + (grid_size[0] - self.width) / 2,
                    self.pos[1] + (grid_size[1] - self.height) / 2)
    
        # update the pos_hint property with the new position
        self.pos_hint = {'x': self.pos[0] / self.parent.width, 'y': self.pos[1] / self.parent.height}
    
        # adjust the button's padding and border to fit within its grid cell
        self.padding = [25, 25]
        self.border = [0, 0, 0, 0]
        if self.parent.size[0] / self.parent.size[1] < set_cols / set_rows:
            self.padding[0] = (self.parent.width / set_cols - self.width) / 2
        else:
            self.padding[1] = (self.parent.height / set_rows - self.height) / 2
        sort_buttons_by_rank('buttons.xml')


def get_grid_centers(layout):
    grid_centers = []
    grid_width = layout.width / layout.cols
    grid_height = layout.height / layout.rows

    for row in range(layout.rows):
        for col in range(layout.cols):
            center_x = col * grid_width + grid_width / 2
            center_y = row * grid_height + grid_height / 2
            grid_centers.append((center_x, center_y))

    return grid_centers


class DraggableButton(Button):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.is_dragging = False
        self.row = None
        self.col = None
        self.pos_hint = {'x': 0, 'y': 0}
        
    def update_button_width(self):
        grid_size = self.parent.size[0] / set_cols, self.parent.size[1] / set_rows
        cell_size = min(grid_size[0], grid_size[1])
        self.width = cell_size 
        self.height = cell_size 
        print("Updating")

        # adjust the button's position based on its new size
        col = int(self.pos[0] // grid_size[0])
        row = int(self.pos[1] // grid_size[1])
        self.pos = (col * grid_size[0] + grid_size[0]/2 - self.width/2,
                    row * grid_size[1] + grid_size[1]/2 - self.height/2)


    def on_touch_down(self, touch):
        if self.collide_point(*touch.pos):
            self.is_dragging = True
            self.border = [4, 4, 4, 4]
            return True

    def on_touch_move(self, touch):
        if self.is_dragging:
            # move the button with the touch
            self.pos = touch.pos

    def on_touch_up(self, touch):
        if self.is_dragging:
            self.is_dragging = False
            self.border = [0, 0, 0, 0]
            # calculate the row and column of the grid location
            x, y = self.pos
            grid_size = self.parent.size[0] / set_cols, self.parent.size[1] / set_rows
            col = int(x // grid_size[0])
            row = int(y // grid_size[1])
            # clamp the row and column values to the valid range
            col = max(min(col, set_cols-1), 0)
            row = max(min(row, set_rows-1), 0)

            # update the button's row and column values
            self.row = (set_rows - row)
            self.col = col + 1

            # place the button in the center of the nearest valid grid location
            self.pos = (col * grid_size[0] + grid_size[0]/2 - self.width/2,
                        row * grid_size[1] + grid_size[1]/2 - self.height/2)

            # update the file with the locations of all the buttons and their order
            tree = ET.parse('/home/pi/Desktop/buttons.xml')
            root = tree.getroot()

            # find the existing element for this button
            button_elem = root.find(f"button[text='{self.text}']")
            if button_elem is not None:
                # remove the existing element
                root.remove(button_elem)

            # create a new element with the updated information
            button_elem = ET.Element('button')
            ET.SubElement(button_elem, 'text').text = self.text
            ET.SubElement(button_elem, 'image').text = self.background_normal
            ET.SubElement(button_elem, 'script').text = ''
            ET.SubElement(button_elem, 'row').text = str(self.row)
            ET.SubElement(button_elem, 'col').text = str(self.col)
            root.append(button_elem)

            # write the updated XML to the file
            tree.write('/home/pi/Desktop/buttons.xml')

            # update the pos_hint property with the new position
            self.pos_hint = {'x': self.pos[0] / self.parent.width, 'y': self.pos[1] / self.parent.height}

            # apply padding to the button
            self.padding = [25, 25]
            
            # Parse the XML file
            tree = ET.parse('buttons.xml')
            root = tree.getroot()
            
            # Create a list of buttons sorted by row and column
            buttons = sorted(root.findall('button'), key=lambda b: (int(b.find('row').text), int(b.find('col').text)))
            
            # Remove existing buttons from the root element
            for button in root.findall('button'):
                root.remove(button)
            
            # Add the sorted buttons back to the root element in order
            for button in buttons:
                root.append(button)
            
            # Write the sorted XML to a file
            tree.write('buttons.xml', encoding='utf-8')
            sort_buttons_by_rank('buttons.xml')

    def update_position(self):
        # update the button's row and column values when it is moved programmatically
        grid_size = self.parent.size[0] / set_cols, self.parent.size[1] / set_rows
        col = int(self.pos[0] // grid_size[0])
        row = int(self.pos[1] // grid_size[1])
    
        # clamp the row and column values to the valid range
        col = max(min(col, 3), 0)
        row = max(min(row, 2), 0)
    
        self.row = 3 - row
        self.col = col + 1
    
        # set the button's size based on the minimum of the grid cell width and height
        cell_size = min(grid_size[0], grid_size[1])
        self.width = cell_size - 50
        self.height = cell_size - 50
    
        # adjust the button's position based on its new size and grid cell
        self.pos = (col * grid_size[0] + grid_size[0]/2 - self.width/2,
                    row * grid_size[1] + grid_size[1]/2 - self.height/2)
    
        # adjust the button's position based on its new size and grid cell
        self.pos = (self.pos[0] + (grid_size[0] - self.width) / 2,
                    self.pos[1] + (grid_size[1] - self.height) / 2)
    
        # update the pos_hint property with the new position
        self.pos_hint = {'x': self.pos[0] / self.parent.width, 'y': self.pos[1] / self.parent.height}
    
        # adjust the button's padding and border to fit within its grid cell
        self.padding = [25, 25]
        self.border = [0, 0, 0, 0]
        if self.parent.size[0] / self.parent.size[1] < set_cols / set_rows:
            self.padding[0] = (self.parent.width / set_cols - self.width) / 2
        else:
            self.padding[1] = (self.parent.height / set_rows - self.height) / 2
        sort_buttons_by_rank('buttons.xml')


def get_grid_centers(layout):
    grid_centers = []
    grid_width = layout.width / layout.cols
    grid_height = layout.height / layout.rows

    for row in range(layout.rows):
        for col in range(layout.cols):
            center_x = col * grid_width + grid_width / 2
            center_y = row * grid_height + grid_height / 2
            grid_centers.append((center_x, center_y))

    return grid_centers
class MyApp(App):
    def print_grid_centers(self, layout):
        grid_centers = get_grid_centers(layout)
        print("Grid centers:")
        for center in grid_centers:
            print(center)
            
    def set_initial_button_positions(self, layout):
        grid_centers = get_grid_centers(layout)
    
        # Reverse the order of the grid centers
        grid_centers = list(reversed(grid_centers))
    
        for i, button in enumerate(layout.children, start=0):
            # Set the initial position of the button
            center_x, center_y = grid_centers[i]
            button.pos = (center_x - button.width / 2, center_y - button.height / 2)
            button.pos_hint = {'x': button.pos[0] / layout.width, 'y': button.pos[1] / layout.height}

    def on_size_change(self, layout, size):
        # Print the main window size
        print(f"Window size: {size}")
        grid_centers = get_grid_centers(layout)
        layout.spacing = ((size[0]-(button_width * set_cols))/ set_cols , (size[1]-(button_height * set_rows)) / set_rows)
        layout.padding = ((size[0]-(button_width * set_cols))/ set_cols / 2 ,(size[1]-(button_height * set_rows))/ set_rows / 2,0,0)
        # update the size and position of the buttons when the window size changes
        for button in layout.children:
            # adjust the button's padding and border to fit within its grid cell
            button.padding = (0, 25)
            button.border = [0, 0, 0, 0]
            button.pos_hint = (1,.5)
        # redraw grid lines
        self.draw_grid_lines(layout)
        self.set_initial_button_positions(layout)
        

    def draw_grid_lines(self, layout):
        layout.canvas.after.clear()
        with layout.canvas.after:
            # draw horizontal grid lines
            #for i in range(1, layout.rows):
            #    Line(points=[0, i * layout.height / layout.rows, layout.width, i * layout.height / layout.rows], width=1)
    
            # draw vertical grid lines
            #for i in range(1, layout.cols):
            #    Line(points=[i * layout.width / layout.cols, 0, i * layout.width / layout.cols, layout.height], width=1)
    
            # draw blue circles and counter in the center of each grid cell
            grid_centers = get_grid_centers(layout)
            circle_radius = 10
            total_cells = len(grid_centers)
            #for i, (center_x, center_y) in enumerate(grid_centers):
                #row = layout.rows - 1 - i // layout.cols
                #col = i % layout.cols
                #index = row * layout.cols + col
                #Color(0, 0, 1, 1)  # blue color
                #Ellipse(pos=(center_x - circle_radius, center_y - circle_radius), size=(circle_radius * 2, circle_radius * 2))
                #Label(text=str(index), pos=(center_x - circle_radius, center_y - circle_radius), color=(0, 1, 0, 1), font_size=circle_radius)


    def build(self):
        # set the initial window size
        layout = GridLayout(cols=set_cols, rows=set_rows)
        layout.bind(size=self.on_size_change)

        # read button information from XML file
        tree = ET.parse('/home/pi/Desktop/buttons.xml')
        root = tree.getroot()

        # create a list of all the buttons in reverse order
        buttons = []
        
        coord = []
    
        distance = 0
        
        place_holders = []

        for button_elem in reversed(root.findall('button')):
            coord.append(button_elem.find('row').text + "," + button_elem.find('col').text)
        
        button_count = 0
        last_coord =(set_rows, set_cols)
        
        for button_elem in reversed(root.findall('button')):
            try:
                id_ = button_elem.find('id').text
            except:
                id_ = ''
            if id_ == 'time':
                # create time button and add it to the list
                time_button = TimeButton(text='Time', size_hint=(None, None),font_name="DS-Digital.ttf", font_size=36,  background_color= [0, 0, 0, 0])
                buttons.append(time_button)

                try:
                    next_row = coord[button_count + 1][0]
                    next_col = coord[button_count + 1][2]
                    start_row, start_col = 1, 1
                    end_row, end_col = start_row, start_col
                                        # Example usage
                    coord1 = (int(button_elem.find('row').text), int(button_elem.find('col').text))
                    coord2 = (int(next_row), int(next_col))
                    
                    distance = int(cell_distance(coord1, coord2, set_cols) -1)
                    for i in range(abs(int(((coord2[0] - coord1[0]) * set_cols) + (coord2[1] - coord1[1]) + 1))):
                        place_holder = Label(size_hint=(None, None))
                        buttons.append(place_holder)
                        place_holders.append(place_holder)
                    
                except:
                    coord = (int(button_elem.find('row').text), int(button_elem.find('col').text))
                    distance = int(cell_distance(coord, (1,1), set_cols))
                    for i in range(distance):
                        place_holder = Label(size_hint=(None, None))
                        buttons.append(place_holder)
                        place_holders.append(place_holder)
            elif id_ == 'date':
                # create date button and add it to the list
                date_button = DateButton(text='Date', size_hint=(None, None))
                buttons.append(date_button)

                try:
                    next_row = coord[button_count + 1][0]
                    next_col = coord[button_count + 1][2]
                    start_row, start_col = 1, 1
                    end_row, end_col = start_row, start_col
                    
       
            
                    # Example usage
                    coord1 = (int(button_elem.find('row').text), int(button_elem.find('col').text))
                    coord2 = (int(next_row), int(next_col))

                    for i in range(abs(int(((coord2[0] - coord1[0]) * set_cols) + (coord2[1] - coord1[1]) + 1))):
                        place_holder = Label(size_hint=(None, None))
                        buttons.append(place_holder)
                        place_holders.append(place_holder)
                        

                except:
                    coord = (int(button_elem.find('row').text), int(button_elem.find('col').text))
                    distance = int(cell_distance(coord, (1,1), set_cols))
                    for i in range(distance):
                        place_holder = Label(size_hint=(None, None))
                        place_holders.append(place_holder)
                        buttons.append(place_holder)
            else:
                # create regular button and add it to the list
                text = button_elem.find('text').text
                image_path = button_elem.find('image').text
                script_path = button_elem.find('script').text
                
                button = DraggableButton(text=text, size_hint=(None, None))
                button.background_normal = image_path
                buttons.append(button)

                try:
                    next_row = coord[button_count + 1][0]
                    next_col = coord[button_count + 1][2]
                    start_row, start_col = 1, 1
                    end_row, end_col = start_row, start_col
                    
       
            
                    # Example usage
                    coord1 = (int(button_elem.find('row').text), int(button_elem.find('col').text))
                    coord2 = (int(next_row), int(next_col))
                    
                    distance = int(cell_distance(coord1, coord2, set_cols) -1)
                    for i in range(abs(int(((coord2[0] - coord1[0]) * set_cols) + (coord2[1] - coord1[1]) + 1))):
                        place_holder = Label(size_hint=(None, None))
                        place_holders.append(place_holder)
                        buttons.append(place_holder)
                except:
                                    # Example usage
                    coord1 = (int(button_elem.find('row').text), int(button_elem.find('col').text))
                    coord2 = (int(next_row), int(next_col))
                    coord = (int(button_elem.find('row').text), int(button_elem.find('col').text))
                    distance = int(cell_distance(coord, (1,1), set_cols))
                    for i in range(distance):
                        place_holder = Label(size_hint=(None, None))
                        place_holders.append(place_holder)
                        buttons.append(place_holder)

                    

                
            button_count += 1
            print(button_count)

        # add the buttons to the layout in reverse order
        for button in reversed(buttons):
            if 'PlaceHolder' in button.text:
                layout.add_widget(button)
            else:
                layout.add_widget(button)


        # schedule the initial positioning of the buttons
        self.set_initial_button_positions(layout)

        # draw initial grid lines
        self.draw_grid_lines(layout)
    
        return layout

    

if __name__ == '__main__':

    MyApp().run()
